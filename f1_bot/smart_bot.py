import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes
from bs4 import BeautifulSoup
import json
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import random
import asyncio
import aiohttp
import async_timeout
from functools import lru_cache
import hashlib
import redis
import pickle
import time

# –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç –ò–ò –±–∏–±–ª–∏–æ—Ç–µ–∫
try:
    from sentence_transformers import SentenceTransformer, util
    import torch
    AI_AVAILABLE = True
except ImportError:
    AI_AVAILABLE = False
    print("AI libraries not available - running in simple mode")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8464916111:AAGGy0HS7GrbwITL_hb6SePhlX2zkJIi4Ik"

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
LANGUAGE, NAME, MAIN_MENU, AI_STYLE, QUESTION, IMAGE_GEN = range(6)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
CACHE_TTL = 3600  # 1 —á–∞—Å
RATE_LIMIT_WINDOW = 60  # 60 —Å–µ–∫—É–Ω–¥
MAX_REQUESTS_PER_MINUTE = 10

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    redis_client = redis.Redis(
        host='localhost',
        port=6379,
        db=0,
        decode_responses=False
    )
    redis_client.ping()
    REDIS_AVAILABLE = True
    logger.info("Redis connected successfully")
except Exception as e:
    REDIS_AVAILABLE = False
    logger.warning(f"Redis not available: {e}. Using in-memory cache")

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}
user_activity = {}  # –î–ª—è rate limiting
response_cache = {}  # Fallback –∫—ç—à

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏
LANGUAGES = {
    "üá∑üá∫ –†—É—Å—Å–∫–∏–π": "ru",
    "üá∫üá∏ English": "en", 
    "üá™üá∏ Espa√±ol": "es",
    "üá´üá∑ Fran√ßais": "fr",
    "üá©üá™ Deutsch": "de"
}

# –°—Ç–∏–ª–∏ –ò–ò –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
AI_STYLES = {
    "ü§ñ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π": "universal",
    "üíª IT-–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç": "it",
    "üé® –¢–≤–æ—Ä—á–µ—Å–∫–∏–π": "creative",
    "üìö –ù–∞—É—á–Ω—ã–π": "scientific", 
    "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π": "financial"
}

# –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
TEXTS = {
    "ru": {
        "welcome": "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "name_ask": "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
        "greeting": "–ü—Ä–∏–≤–µ—Ç, {name}! –†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É!",
        "main_menu": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        "ai_style": "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞:",
        "ask_question": "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
        "searching": "üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...",
        "settings": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        "info": "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        "generate_image": "üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        "ask_image": "–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:",
        "image_created": "üñºÔ∏è –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!",
        "error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        "thanks": "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! üòä",
        "smart_response": "üß† –£–º–Ω—ã–π –æ—Ç–≤–µ—Ç",
        "deep_search": "üîç –ì–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫",
        "rate_limit": "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ."
    },
    "en": {
        "welcome": "üåç Choose language:",
        "name_ask": "What is your name?",
        "greeting": "Hello, {name}! Nice to meet you!",
        "main_menu": "Main menu:",
        "ai_style": "Choose response style:",
        "ask_question": "Ask your question:",
        "searching": "üîç Searching for information...",
        "settings": "‚öôÔ∏è Settings",
        "info": "‚ÑπÔ∏è Information", 
        "generate_image": "üé® Generate image",
        "ask_image": "Describe what you want to see in the image:",
        "image_created": "üñºÔ∏è Your image is ready!",
        "error": "‚ùå An error occurred. Please try again.",
        "thanks": "Thanks for your question! üòä",
        "smart_response": "üß† Smart response",
        "deep_search": "üîç Deep search",
        "rate_limit": "‚ö†Ô∏è Too many requests. Please wait a moment."
    }
}

class CacheManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Redis"""
    
    def __init__(self):
        self.use_redis = REDIS_AVAILABLE
    
    def _get_key(self, key_prefix: str, identifier: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è –∫—ç—à–∞"""
        return f"{key_prefix}:{hashlib.md5(identifier.encode()).hexdigest()}"
    
    def get(self, key_prefix: str, identifier: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞"""
        cache_key = self._get_key(key_prefix, identifier)
        
        try:
            if self.use_redis:
                cached_data = redis_client.get(cache_key)
                if cached_data:
                    return pickle.loads(cached_data)
            else:
                if cache_key in response_cache:
                    data, expiry = response_cache[cache_key]
                    if time.time() < expiry:
                        return data
        except Exception as e:
            logger.error(f"Cache get error: {e}")
        
        return None
    
    def set(self, key_prefix: str, identifier: str, data, ttl: int = CACHE_TTL):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à"""
        cache_key = self._get_key(key_prefix, identifier)
        expiry = time.time() + ttl
        
        try:
            if self.use_redis:
                redis_client.setex(
                    cache_key,
                    ttl,
                    pickle.dumps(data)
                )
            else:
                response_cache[cache_key] = (data, expiry)
        except Exception as e:
            logger.error(f"Cache set error: {e}")

class RateLimiter:
    """–°–∏—Å—Ç–µ–º–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self):
        self.user_requests = {}
    
    def check_rate_limit(self, user_id: int) -> Tuple[bool, int]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        current_time = time.time()
        
        if user_id not in self.user_requests:
            self.user_requests[user_id] = []
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        self.user_requests[user_id] = [
            req_time for req_time in self.user_requests[user_id]
            if current_time - req_time < RATE_LIMIT_WINDOW
        ]
        
        if len(self.user_requests[user_id]) >= MAX_REQUESTS_PER_MINUTE:
            wait_time = int(RATE_LIMIT_WINDOW - (current_time - self.user_requests[user_id][0]))
            return False, wait_time
        
        self.user_requests[user_id].append(current_time)
        return True, 0

class EnhancedSmartAssistant(SmartAssistant):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏"""
    
    def __init__(self):
        super().__init__()
        self.cache = CacheManager()
        self.session = None
        self.search_semaphore = asyncio.Semaphore(5)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤
    
    async def async_init(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        self.session = aiohttp.ClientSession(
            timeout=aiohttp.ClientTimeout(total=10),
            headers={
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            }
        )
    
    async def find_similar_async(self, question: str, top_k: int = 3):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        cache_key = f"similar:{question}"
        cached_result = self.cache.get("similar", question)
        
        if cached_result:
            logger.info(f"Cache hit for similar: {question}")
            return cached_result
        
        result = self.find_similar(question, top_k)
        self.cache.set("similar", question, result, ttl=1800)  # 30 –º–∏–Ω—É—Ç
        
        return result

class AdvancedSearch:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞"""
    
    def __init__(self):
        self.cache = CacheManager()
        self.trusted_sources = {
            'ru': [
                'rbc.ru', 'ria.ru', 'tass.ru', 'lenta.ru', 'kommersant.ru',
                'vedomosti.ru', 'rg.ru', 'interfax.ru', 'gazeta.ru'
            ],
            'en': [
                'reuters.com', 'bloomberg.com', 'bbc.com', 'cnn.com',
                'theguardian.com', 'nytimes.com', 'wsj.com', 'apnews.com'
            ]
        }
    
    async def enhanced_search(self, query: str, lang: str = "ru") -> List[str]:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        cache_key = f"search:{query}:{lang}"
        cached_results = self.cache.get("search", f"{query}:{lang}")
        
        if cached_results:
            logger.info(f"Cache hit for search: {query}")
            return cached_results
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ (–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∞—à—É —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é)
        basic_results = google_search(query, lang)
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        trusted_results = []
        other_results = []
        
        for result in basic_results:
            if any(trusted in result for trusted in self.trusted_sources.get(lang, [])):
                trusted_results.append(result)
            else:
                other_results.append(result)
        
        final_results = trusted_results + other_results
        
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.cache.set("search", f"{query}:{lang}", final_results, ttl=3600)
        
        return final_results

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
cache_manager = CacheManager()
rate_limiter = RateLimiter()
assistant = EnhancedSmartAssistant()
advanced_search = AdvancedSearch()

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async def initialize_assistant():
    await assistant.async_init()

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ rate limiting
def handle_errors(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.message.from_user.id
        lang_code = user_data.get(user_id, {}).get("lang", "ru")
        texts = TEXTS.get(lang_code, TEXTS["ru"])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
        allowed, wait_time = rate_limiter.check_rate_limit(user_id)
        if not allowed:
            await update.message.reply_text(
                f"{texts['rate_limit']} ({wait_time} —Å–µ–∫.)"
            )
            return MAIN_MENU
        
        try:
            return await func(update, context, *args, **kwargs)
        except Exception as e:
            logger.error(f"Error in {func.__name__}: {e}")
            await update.message.reply_text(texts["error"])
            return MAIN_MENU
    
    return wrapper

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
@handle_errors
async def question_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    user_id = update.message.from_user.id
    question = update.message.text
    lang_code = user_data[user_id]["lang"]
    texts = TEXTS.get(lang_code, TEXTS["ru"])
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ –æ—Ç–≤–µ—Ç–æ–≤
    cached_response = cache_manager.get("answer", f"{user_id}:{question}")
    if cached_response:
        logger.info(f"Serving cached answer for user {user_id}")
        await update.message.reply_text(cached_response)
        await update.message.reply_text(texts["thanks"])
        return MAIN_MENU
    
    await update.message.reply_text(texts["searching"])
    
    try:
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞
        search_results = await advanced_search.enhanced_search(question, lang_code)
        context_info = ""
        
        if search_results:
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü
            page_text = await extract_info_from_page_async(search_results[0])
            if page_text:
                context_info = page_text
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ò–ò
        response = generate_smart_response(question, context_info, lang_code)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        if search_results and context_info:
            response += f"\n\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫: {search_results[0]}"
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        cache_manager.set("answer", f"{user_id}:{question}", response, ttl=1800)
        
        await update.message.reply_text(response)
        await update.message.reply_text(texts["thanks"])
            
    except Exception as e:
        logger.error(f"Search error: {e}")
        await update.message.reply_text(texts["error"])
    
    return MAIN_MENU

async def extract_info_from_page_async(url: str) -> str:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    cache_key = f"page:{url}"
    cached_content = cache_manager.get("page", url)
    
    if cached_content:
        return cached_content
    
    try:
        async with assistant.session.get(url) as response:
            if response.status == 200:
                content = await response.text()
                info = extract_info_from_page(url)  # –í–∞—à–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è
                cache_manager.set("page", url, info, ttl=7200)  # 2 —á–∞—Å–∞
                return info
    except Exception as e:
        logger.error(f"Async page extraction error: {e}")
    
    return ""

# –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
class UserProfileManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        self.user_profiles = {}
    
    def get_user_profile(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_profiles:
            self.user_profiles[user_id] = {
                'preferred_style': 'universal',
                'search_history': [],
                'response_preferences': {},
                'last_interaction': datetime.now(),
                'total_requests': 0
            }
        return self.user_profiles[user_id]
    
    def update_user_activity(self, user_id: int, question: str, response: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        profile = self.get_user_profile(user_id)
        profile['search_history'].append({
            'question': question,
            'response': response,
            'timestamp': datetime.now().isoformat()
        })
        profile['last_interaction'] = datetime.now()
        profile['total_requests'] += 1
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 100 –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if len(profile['search_history']) > 100:
            profile['search_history'] = profile['search_history'][-100:]

user_profile_manager = UserProfileManager()

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
@handle_errors
async def personalized_question_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    user_id = update.message.from_user.id
    question = update.message.text
    lang_code = user_data[user_id]["lang"]
    texts = TEXTS.get(lang_code, TEXTS["ru"])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profile = user_profile_manager.get_user_profile(user_id)
    preferred_style = user_profile.get('preferred_style', 'universal')
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ based –Ω–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞...
    response = await question_handler(update, context)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_profile_manager.update_user_activity(user_id, question, "response_content")
    
    return response

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user_id = update.message.from_user.id
    profile = user_profile_manager.get_user_profile(user_id)
    
    stats_text = (
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {profile['total_requests']}\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {profile['last_interaction'].strftime('%Y-%m-%d %H:%M')}\n"
        f"‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å: {profile['preferred_style']}\n"
        f"üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è!"
    )
    
    await update.message.reply_text(stats_text)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
    application = Application.builder().token(TOKEN).build()
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    loop = asyncio.get_event_loop()
    loop.run_until_complete(initialize_assistant())
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, language_handler)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_handler)],
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu_handler)],
            AI_STYLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ai_style_handler)],
            QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, personalized_question_handler)],
            IMAGE_GEN: [MessageHandler(filters.TEXT & ~filters.COMMAND, image_generation_handler)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    application.add_handler(CommandHandler('stats', stats_command))
    application.add_handler(conv_handler)
    
    print("ü§ñ –£–º–Ω—ã–π –±–æ—Ç —Å –ò–ò –∑–∞–ø—É—â–µ–Ω —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏!")
    print("‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ")
    print("‚úÖ Rate limiting –∞–∫—Ç–∏–≤–µ–Ω")
    print("‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    application.run_polling()

if __name__ == "__main__":
    main()